<div id="blocker">
  <div id="instructions">
    <span style="font-size:40px">Click to play</span>
    <br />
    (W, A, S, D = Move, SPACE = Jump, MOUSE = Look around)
  </div>
</div>
<div id="infoBox" title="Demo Information" style=" ">
This is a demo, part of a collection at
<a href="http://stemkoski.github.io/Three.js/">http://stemkoski.github.io/Three.js/</a>
</div>
<script src="http://code.jquery.com/jquery-1.9.1.js"></script>
<script src="http://code.jquery.com/ui/1.10.2/jquery-ui.js"></script>
<link rel=stylesheet href="http://code.jquery.com/ui/1.10.2/themes/smoothness/jquery-ui.css" />
<%= javascript_include_tag 'coins' %>
<script>
$(function()
{
	 $("#infoBox")
	.css(
	{
	   "background":"rgba(255,255,255,0.5)", "width":"20px", "height": "20%"
	})
	.dialog({ autoOpen: false,
		show: { effect: 'fade', duration: 500 },
		hide: { effect: 'fade', duration: 500 },
	});

	//  $("#infoButton")
  //      .text("") // sets text to empty
	// .css(
	// { "z-index":"2",
	//   "background":"rgba(0,0,0,0)", "opacity":"0.9",
	//   "position":"absolute", "top":"4px", "left":"4px"
	// }) // adds CSS
  //   .append("<img width='32' height='32' src='images/icon-info.png'/>")
  //   .button()
	// .click(
	// 	function()
	// 	{
	// 		$("#infoBox").dialog("open");
	// 	});
});
</script>
<script>

var camera, scene, renderer, controls;

var objects = [];

var bloomPass, adaptToneMappingPass, ldrToneMappingPass, hdrToneMappingPass;
var params;
var raycaster;
var mouse = new THREE.Vector2(), INTERSECTED;
var currentIntersected, sphereInter ;


var blocker = document.getElementById('blocker');
var instructions = document.getElementById('instructions');
var havePointerLock = 'pointerLockElement' in document || 'mozPointerLockElement' in document ||
  'webkitPointerLockElement' in document;

if (havePointerLock) {
  var element = document.body;
  var pointerlockchange = function (event) {
    if (document.pointerLockElement === element || document.mozPointerLockElement === element || document.webkitPointerLockElement ===
      element) {
      controlsEnabled = true;
      controls.enabled = true;
      blocker.style.display = 'none';
    } else {
      controls.enabled = false;
      blocker.style.display = 'block';
      instructions.style.display = '';
    }

  };

  var pointerlockerror = function (event) {
    instructions.style.display = '';
  };

  // Hook pointer lock state change events
  document.addEventListener('pointerlockchange', pointerlockchange, false);
  document.addEventListener('mozpointerlockchange', pointerlockchange, false);
  document.addEventListener('webkitpointerlockchange', pointerlockchange, false);

  document.addEventListener('pointerlockerror', pointerlockerror, false);
  document.addEventListener('mozpointerlockerror', pointerlockerror, false);
  document.addEventListener('webkitpointerlockerror', pointerlockerror, false);

  instructions.addEventListener('click', function (event) {
    instructions.style.display = 'none';
    element.requestPointerLock = element.requestPointerLock || element.mozRequestPointerLock || element.webkitRequestPointerLock;
    element.requestPointerLock();
  }, false);

} else {
  instructions.innerHTML = 'Your browser doesn\'t seem to support Pointer Lock API';
}

var controlsEnabled = false;

var moveForward = false;
var moveBackward = false;
var moveLeft = false;
var moveRight = false;
var canJump = false;

var prevTime = performance.now();
var velocity = new THREE.Vector3();
var direction = new THREE.Vector3();
var vertex = new THREE.Vector3();
var color = new THREE.Color();
var coinPreview; 
var previewCoinTexture1;
var  params = {
					bloomAmount: 1.0,
					sunLight: 4.0,

					enabled: true,
					avgLuminance: 0.7,
					middleGrey: 0.04,
					maxLuminance: 16,

					adaptionRate: 2.0
				};

init();
animate();

function init() {
  camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 1, 1000);
  camera.translateY(5);

  scene = new THREE.Scene();
  scene.background = new THREE.Color(0x000000);
  scene.fog = new THREE.Fog(0xffffff, 0, 750);

  var light = new THREE.HemisphereLight(0xeeeeff, 0x777788, 0.75);
  light.position.set(0.5, 1, 0.75);
  scene.add(light);

  directionalLight = new THREE.DirectionalLight( 0xffffff, params.sunLight );
				directionalLight.position.set( 2, 0, 10 ).normalize();
				scene.add( directionalLight );

  controls = new THREE.PointerLockControls(camera);
  scene.add(controls.getObject());

  var onKeyDown = function (event) {

    switch (event.keyCode) {

      case 38: // up
      case 87: // w
        moveForward = true;
        break;

      case 37: // left
      case 65: // a
        moveLeft = true;
        break;

      case 40: // down
      case 83: // s
        moveBackward = true;
        break;

      case 39: // right
      case 68: // d
        moveRight = true;
        break;

      case 32: // space
        if (canJump === true) velocity.y += 350;
        canJump = false;
        break;

      case 67:
        $("#infoBox").dialog("close")
        break;

      case 79:
        if (params.bloomAmount > 0.0) {
          params.bloomAmount -= 0.2;
          sceneGui.updateDisplay();
        }
        console.log(params.bloomAmount);
        break;

      case 80:
        if ( params.bloomAmount < 10.0) {
           params.bloomAmount += 0.2;
           sceneGui.updateDisplay();
        }
        console.log(params.bloomAmount);
        break;    
    }

  };

  var onKeyUp = function (event) {

    switch (event.keyCode) {

      case 38: // up
      case 87: // w
        moveForward = false;
        break;

      case 37: // left
      case 65: // a
        moveLeft = false;
        break;

      case 40: // down
      case 83: // s
        moveBackward = false;
        break;

      case 39: // right
      case 68: // d
        moveRight = false;
        break;

    }

  };

  document.addEventListener('keydown', onKeyDown, false);
  document.addEventListener('keyup', onKeyUp, false);

  // floor
  geometry = new THREE.PlaneGeometry(800, 800, 0, 0);
  geometry.rotateX(-Math.PI / 2);
  floorTexture = new THREE.TextureLoader().load(
    'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTABCiDPjncx4Na0KlSx45XNMxLroHa06tAibR6GTb9ARirjMZQ');
  floorTexture.wrapS = floorTexture.wrapT = THREE.RepeatWrapping;
  floorTexture.repeat.set(20, 20);
  material = new THREE.MeshBasicMaterial({
      map: floorTexture
    }),
    mesh = new THREE.Mesh(geometry, material);
  scene.add(mesh);




  // var geometry = new THREE.SphereGeometry(40, 40, 40, 0, Math.PI *2, 0, 0.5*Math.PI);
  // // var link = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRayHLURKisL2wZawPCnx-J-ahowfDwQ1MNjsPR2MtQVYn1QNfn'
  // var link = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTor4EAHb7F7hxsro75fqTODuZ8tMU06X_DmsjAddVTs-blsYiT'
  // // var link = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSeB2k2p2tiNfag6-_1L_P-sU3m9VxL6HG0vMow4JkP72hvC9dD'
  // sphereTexture = new THREE.TextureLoader().load(link );
  // sphereTexture.wrapS = sphereTexture.wrapT = THREE.sphereTexture;
  // material = new THREE.MeshBasicMaterial({map: sphereTexture}),
  // ceiling = new THREE.Mesh(geometry, material);
  // ceiling.material.side = THREE.BackSide;

  // scene.add(ceiling);
  var textures_array = []
    <% @test_info.each do |coin| %>
       path = '<%=coin%>'
       previewCoinTexture = new THREE.TextureLoader().load(path);
       previewCoinTexture.wrapS = previewCoinTexture.wrapT = THREE.RepeatWrapping;
       textureMesh =  new THREE.MeshBasicMaterial({
         map: previewCoinTexture
       })
      textures_array.push(textureMesh);
    <% end %>

  var objectLoader = new THREE.ObjectLoader();
  objectLoader.load("../assets/model_plan/coinmuseum.json", function (obj) {


    cube = new THREE.CubeGeometry(3, 3, 0.2);

    var coins_array = [];

    var k = 0;

    for (let i = -1; i < 85; i += 5) {
      if (i < 36 || i > 46) {
        cube1 = new THREE.Mesh(cube ,textures_array[k]); k+=1
        cube1.position.set(i, 2.5, 4.8);
        obj.add(cube1);
        cube2 =  new THREE.Mesh(cube ,textures_array[k]); k+=1
        cube2.position.set(i, 2.5, -35.6);
        obj.add(cube2);
        coins_array.push(cube1);
        coins_array.push(cube2);
      }
    }

    for (let i = 0; i < 84; i += 5) {
      if (i < 34 || i > 47.5) {
        cube1 = new THREE.Mesh(cube ,textures_array[k]); k+=1;
        cube1.position.set(i, 2.5, 3.6);
        obj.add(cube1);
        cube2 =  new THREE.Mesh(cube ,textures_array[k]); k+=1;
        cube2.position.set(i, 2.5, -34.3);
        obj.add(cube2);
        coins_array.push(cube1);
        coins_array.push(cube2);
      }
    }


    for (let i = 2.5; i > -36.5; i -= 5) {
      cube3 = new THREE.Mesh(cube ,textures_array[k]); k+=1;
      cube3.position.set(-3.4, 2.5, i);
      cube3.rotateY(-Math.PI / 2);
      obj.add(cube3);
      cube33 = new THREE.Mesh(cube ,textures_array[k]); k+=1;
      cube33.position.set(-2, 2.5, i);
      cube33.rotateY(-Math.PI / 2);
      obj.add(cube33);
      cube4 =  new THREE.Mesh(cube ,textures_array[k]); k+=1;
      cube4.position.set(85.7, 2.5, i);
      cube4.rotateY(-Math.PI / 2);
      obj.add(cube4);
      cube5 =  new THREE.Mesh(cube ,textures_array[k]); k+=1;
      cube5.position.set(84.3, 2.5, i);
      cube5.rotateY(-Math.PI / 2);
      obj.add(cube5)

      if (i > -25 ) {
        cube1 = new THREE.Mesh(cube ,textures_array[k]); k+=1;
        cube1.position.set(36, 2.5, i);
        cube1.rotateY(-Math.PI / 2);
        obj.add(cube1);
        cube11 = new THREE.Mesh(cube ,textures_array[k]); k+=1;
        cube11.position.set(35, 2.5, i);
        cube11.rotateY(-Math.PI / 2);
        obj.add(cube11);
        cube2 =  new THREE.Mesh(cube ,textures_array[k]); k+=1;
        cube2.position.set(46.1, 2.5, i);
        cube2.rotateY(-Math.PI / 2);
        obj.add(cube2);
        cube22 =  new THREE.Mesh(cube ,textures_array[k]); k+=1;
        cube22.position.set(47.4, 2.5, i);
        cube22.rotateY(-Math.PI / 2);
        obj.add(cube22);


        coins_array.push(cube1);
        coins_array.push(cube11);
        coins_array.push(cube2);
        coins_array.push(cube22);
      }

      if (i < -5) {
        cube6 = new THREE.Mesh(cube ,textures_array[k]); k+=1;
        cube6.position.set(65.1, 2.5, i);
        cube6.rotateY(-Math.PI / 2);
        obj.add(cube6);
        cube66 = new THREE.Mesh(cube ,textures_array[k]); k+=1;
        cube66.position.set(66.6, 2.5, i);
        cube66.rotateY(-Math.PI / 2);
        obj.add(cube66);
        coins_array.push(cube6);
        coins_array.push(cube66);

      }
      coins_array.push(cube3);
      coins_array.push(cube33);
      coins_array.push(cube4);
      coins_array.push(cube5);
    }

    cube7 = new THREE.Mesh(cube ,textures_array[k]); k+=1;
    cube7.position.set(79.5, 2.5, -15.8);
    obj.add(cube7);
    cube77 = new THREE.Mesh(cube ,textures_array[k]); k+=1;
    cube77.position.set(79.5, 2.5, -14.6);
    obj.add(cube77);
    coins_array.push(cube7);
    coins_array.push(cube77);

    cube8 = new THREE.Mesh(cube ,textures_array[k]); k+=1;
    cube8.position.set(11.5, 2.5, -15.8);
    obj.add(cube8);
    cube88 = new THREE.Mesh(cube ,textures_array[k]); k+=1;
    cube88.position.set(11.5, 2.5, -14.6);
    obj.add(cube88);
    coins_array.push(cube8);
    coins_array.push(cube88);

    cube9 = new THREE.Mesh(cube ,textures_array[k]); k+=1;
    cube9.position.set(21.5, 2.5, -15.8);
    obj.add(cube9);
    cube99 = new THREE.Mesh(cube ,textures_array[k]); k+=1;
    cube99.position.set(21.5, 2.5, -14.6);
    obj.add(cube99);
    coins_array.push(cube9);
    coins_array.push(cube99);

    cube10 = new THREE.Mesh(cube ,textures_array[k]); k+=1;
    cube10.position.set(15.5, 2.5, -20.8);
    cube10.rotateY(-Math.PI / 2);
    obj.add(cube10);
    cube101 = new THREE.Mesh(cube ,textures_array[k]); k+=1;
    cube101.position.set(15.5, 2.5, -9.6);
    cube101.rotateY(-Math.PI / 2);
    obj.add(cube101);
    coins_array.push(cube101);
    coins_array.push(cube10);

    cube102 = new THREE.Mesh(cube ,textures_array[k]); k+=1;
    cube102.position.set(17, 2.5, -20.8);
    cube102.rotateY(-Math.PI / 2);
    obj.add(cube102);
    cube103 = new THREE.Mesh(cube ,textures_array[k]); k+=1;
    cube103.position.set(17, 2.5, -9.6);
    cube103.rotateY(-Math.PI / 2);
    obj.add(cube103);
    coins_array.push(cube103);
    coins_array.push(cube102);
    scene.add(obj);
    obj.position.set(-80, 0, 0);
    obj.name = "Museum"
    obj.scale.set(3, 3, 3);
    objects = coins_array
  });

  var objectLoader1 = new THREE.ObjectLoader();
  objectLoader1.load("../assets/model_plan/coinmuseum.json", function (obj) {
      // cube = new THREE.CubeGeometry(3, 3, 0.2)
    var coins_array = [];

    cube = new THREE.CylinderGeometry(2, 2, 0.5,30,0.2)
    cube.rotateX(-Math.PI / 2);

    var k = 0
    for (let i = -1; i < 85; i += 5) {
      if (i < 36 || i > 46) {
        cube1 = new THREE.Mesh(cube ,textures_array[k]); k+=1;
        cube1.position.set(i, 2.5, 4.8);
        obj.add(cube1);
        cube2 =  new THREE.Mesh(cube ,textures_array[k]); k+=1;
        cube2.position.set(i, 2.5, -35.6);
        obj.add(cube2);
        coins_array.push(cube1);
        coins_array.push(cube2);
      }
    }

    for (let i = 0; i < 84; i += 5) {
      if (i < 34 || i > 47.5) {
        cube1 = new THREE.Mesh(cube ,textures_array[k]); k+=1;
        cube1.position.set(i, 2.5, 3.6);
        obj.add(cube1);
        cube2 =  new THREE.Mesh(cube ,textures_array[k]); k+=1;
        cube2.position.set(i, 2.5, -34.3);
        obj.add(cube2);
        coins_array.push(cube1);
        coins_array.push(cube2);
      }
    }


    for (let i = 2.5; i > -36.5; i -= 5) {
      cube3 = new THREE.Mesh(cube ,textures_array[k]); k+=1;
      cube3.position.set(-3.4, 2.5, i);
      
      obj.add(cube3);
      cube33 = new THREE.Mesh(cube ,textures_array[k]); k+=1;
      cube33.position.set(-2, 2.5, i);
      cube33.rotateY(-Math.PI / 2);
      obj.add(cube33);
      cube4 =  new THREE.Mesh(cube ,textures_array[k]); k+=1;
      cube4.position.set(85.7, 2.5, i);
      cube4.rotateY(-Math.PI / 2);
      obj.add(cube4);
      cube5 =  new THREE.Mesh(cube ,textures_array[k]); k+=1;
      cube5.position.set(84.3, 2.5, i);
      cube5.rotateY(-Math.PI / 2);
      obj.add(cube5)

      if (i > -25 ) {
        cube1 = new THREE.Mesh(cube ,textures_array[k]); k+=1;
        cube1.position.set(36, 2.5, i);
        cube1.rotateY(-Math.PI / 2);
        obj.add(cube1);
        cube11 = new THREE.Mesh(cube ,textures_array[k]); k+=1;
        cube11.position.set(35, 2.5, i);
        cube11.rotateY(-Math.PI / 2);
        obj.add(cube11);
        cube2 =  new THREE.Mesh(cube ,textures_array[k]); k+=1;
        cube2.position.set(46.1, 2.5, i);
        cube2.rotateY(-Math.PI / 2);
        obj.add(cube2);
        cube22 =  new THREE.Mesh(cube ,textures_array[k]); k+=1;
        cube22.position.set(47.4, 2.5, i);
        cube22.rotateY(-Math.PI / 2);
        obj.add(cube22);
        coins_array.push(cube1);
        coins_array.push(cube11);
        coins_array.push(cube2);
        coins_array.push(cube22);
      }

      if (i < -5) {
        cube6 = new THREE.Mesh(cube ,textures_array[k]); k+=1;
        cube6.position.set(65.1, 2.5, i);
        cube6.rotateY(-Math.PI / 2);
        obj.add(cube6);
        cube66 = new THREE.Mesh(cube ,textures_array[k]); k+=1;
        cube66.position.set(66.6, 2.5, i);
        cube66.rotateY(-Math.PI / 2);
        obj.add(cube66);
        coins_array.push(cube6);
        coins_array.push(cube66);

      }
      coins_array.push(cube3);
      coins_array.push(cube33);
      coins_array.push(cube4);
      coins_array.push(cube5);
    }

    cube7 = new THREE.Mesh(cube ,textures_array[k]); k+=1;
    cube7.position.set(79.5, 2.5, -15.8);
    obj.add(cube7);
    cube77 = new THREE.Mesh(cube ,textures_array[k]); k+=1;
    cube77.position.set(79.5, 2.5, -14.6);
    obj.add(cube77);
    coins_array.push(cube7);
    coins_array.push(cube77);

    cube8 = new THREE.Mesh(cube ,textures_array[k]); k+=1;
    cube8.position.set(11.5, 2.5, -15.8);
    obj.add(cube8);
    cube88 = new THREE.Mesh(cube ,textures_array[k]); k+=1;
    cube88.position.set(11.5, 2.5, -14.6);
    obj.add(cube88);
    coins_array.push(cube8);
    coins_array.push(cube88);

    cube9 = new THREE.Mesh(cube ,textures_array[k]); k+=1;
    cube9.position.set(21.5, 2.5, -15.8);
    obj.add(cube9);
    cube99 = new THREE.Mesh(cube ,textures_array[k]); k+=1;
    cube99.position.set(21.5, 2.5, -14.6);
    obj.add(cube99);
    coins_array.push(cube9);
    coins_array.push(cube99);

    cube10 = new THREE.Mesh(cube ,textures_array[k]); k+=1;
    cube10.position.set(15.5, 2.5, -20.8);
    cube10.rotateY(-Math.PI / 2);
    obj.add(cube10);
    cube101 = new THREE.Mesh(cube ,textures_array[k]); k+=1;
    cube101.position.set(15.5, 2.5, -9.6);
    cube101.rotateY(-Math.PI / 2);
    obj.add(cube101);
    coins_array.push(cube101);
    coins_array.push(cube10);

    cube102 = new THREE.Mesh(cube ,textures_array[k]); k+=1;
    cube102.position.set(17, 2.5, -20.8);
    cube102.rotateY(-Math.PI / 2);
    obj.add(cube102);
    cube103 = new THREE.Mesh(cube ,textures_array[k]); k+=1;
    cube103.position.set(17, 2.5, -9.6);
    cube103.rotateY(-Math.PI / 2);
    obj.add(cube103);
    coins_array.push(cube103);
    coins_array.push(cube102);
    scene.add(obj);
    obj.position.set(-350, 0, -150);
    obj.rotateY(-Math.PI / 2);
    obj.name = "Museum1"
    obj.scale.set(3, 3, 3);
  });

 

test = new THREE.CylinderGeometry(6, 6, 0.5,30,0.2);
tempcoin = new THREE.Mesh(test, textures_array[0] );
tempcoin.position.set( 20, 15, 0);
tempcoin.name = "Coin"
tempcoin.rotateX(-Math.PI/2)
scene.add(tempcoin);

var atmoShader = {
    side: THREE.BackSide,
    // blending: THREE.AdditiveBlending,
    transparent: true,
    lights: true,
    uniforms: THREE.UniformsUtils.merge( [

      THREE.UniformsLib[ "common" ],
      THREE.UniformsLib[ "lights" ]

    ] ),
    vertexShader: [
      "varying vec3 vViewPosition;",
      "varying vec3 vNormal;",
      "void main() {",
        THREE.ShaderChunk[ "beginnormal_vertex" ],
        THREE.ShaderChunk[ "defaultnormal_vertex" ],

        "	vNormal = normalize( transformedNormal );",
        "vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );",
        "vViewPosition = -mvPosition.xyz;",
        "gl_Position = projectionMatrix * mvPosition;",
      "}"

    ].join("\n"),

    fragmentShader: [

      THREE.ShaderChunk[ "common" ],
      THREE.ShaderChunk[ "bsdfs" ],
      THREE.ShaderChunk[ "lights_pars_begin" ],
      THREE.ShaderChunk[ "lights_pars_maps" ],
      THREE.ShaderChunk[ "lights_phong_pars_fragment" ],

      "void main() {",
        "vec3 normal = normalize( -vNormal );",
        "vec3 viewPosition = normalize( vViewPosition );",
        "#if NUM_DIR_LIGHTS > 0",

          "vec3 dirDiffuse = vec3( 0.0 );",

          "for( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {",

            "vec4 lDirection = viewMatrix * vec4( directionalLights[i].direction, 0.0 );",
            "vec3 dirVector = normalize( lDirection.xyz );",
            "float dotProduct = dot( viewPosition, dirVector );",
            "dotProduct = 1.0 * max( dotProduct, 0.0 ) + (1.0 - max( -dot( normal, dirVector ), 0.0 ));",
            "dotProduct *= dotProduct;",
            "dirDiffuse += max( 0.5 * dotProduct, 0.0 ) * directionalLights[i].color;",
          "}",
        "#endif",

        //Fade out atmosphere at edge
        "float viewDot = abs(dot( normal, viewPosition ));",
        "viewDot = clamp( pow( viewDot + 0.6, 10.0 ), 0.0, 1.0);",

        "vec3 color = vec3( 0.05, 0.09, 0.13 ) * dirDiffuse;",
        "gl_FragColor = vec4( color, viewDot );",

      "}"

    ].join("\n")
  };

  var earthAtmoMat = new THREE.ShaderMaterial( atmoShader );
  coinShader = new THREE.Mesh(test, earthAtmoMat );
  coinShader.position.set( 20, 15, 0);
  coinShader.name = "CoinShader"
  coinShader.rotateX(-Math.PI/2)
  coinShader.scale.set( 1.05, 1.05, 1.05 );
  scene.add(coinShader)

  var gui = new dat.GUI();

  // dynamicHdrGui.add( params, 'projection', { 'From cam to mesh': 'camera', 'Normal to mesh': 'normal' } );
  var sceneGui = gui.addFolder( 'Scenes' );
  // var toneMappingGui = gui.addFolder( 'ToneMapping' );
  // var staticToneMappingGui = gui.addFolder( 'StaticOnly' );
  // var adaptiveToneMappingGui = gui.addFolder( 'AdaptiveOnly' );

  sceneGui.add( params, 'bloomAmount', 0.0, 10.0 );
  sceneGui.add( params, 'sunLight', 0.1, 12.0 );

  // toneMappingGui.add( params, 'enabled' );
  // toneMappingGui.add( params, 'middleGrey', 0, 12 );
  // toneMappingGui.add( params, 'maxLuminance', 1, 30 );

  // staticToneMappingGui.add( params, 'avgLuminance', 0.001, 2.0 );
  // adaptiveToneMappingGui.add( params, 'adaptionRate', 0.0, 10.0 );

  sceneGui.open();
  gui.open();




  raycaster = new THREE.Raycaster();
  renderer = new THREE.WebGLRenderer({
    antialias: true
  });

  renderer.setPixelRatio(window.devicePixelRatio);
  renderer.setSize(window.innerWidth, window.innerHeight);
  renderer.autoClear = false;
	renderer.gammaInput = true;
	renderer.gammaOutput = false;

  hdrToneMappingPass = new THREE.AdaptiveToneMappingPass( true, 256 );


  var parameters = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBAFormat, stencilBuffer: false };
  if ( renderer.extensions.get('OES_texture_half_float_linear') ) {
					parameters.type = THREE.FloatType;
				}
  var hdrRenderTarget = new THREE.WebGLRenderTarget( 1000, 1000, parameters );
  hdrEffectComposer = new THREE.EffectComposer( renderer, hdrRenderTarget );
  var scenePass = new THREE.RenderPass( scene, camera, undefined, undefined, undefined );
  bloomPass = new THREE.BloomPass();
  console.log(bloomPass);
  
  var gammaCorrectionPass = new THREE.ShaderPass( THREE.GammaCorrectionShader );
	gammaCorrectionPass.renderToScreen = true;
  hdrEffectComposer.addPass( scenePass );
	hdrEffectComposer.addPass( hdrToneMappingPass );
	hdrEffectComposer.addPass( bloomPass );
	hdrEffectComposer.addPass( gammaCorrectionPass );









  document.body.appendChild(renderer.domElement);

  //
  document.addEventListener( 'mousedown', onMouseDown, false );

  window.addEventListener('resize', onWindowResize, false);

}

function onWindowResize() {

  camera.aspect = window.innerWidth / window.innerHeight;
  camera.updateProjectionMatrix();

  renderer.setSize(window.innerWidth, window.innerHeight);
}

function onMouseDown() {

  if (controlsEnabled === true) {
     console.log("Click");
     raycaster.setFromCamera( mouse, camera );
     both_coins = (scene.getObjectByName("Museum",true).children).concat(scene.getObjectByName("Museum1",true).children)
     var intersects = raycaster.intersectObjects(both_coins);
     if ( intersects.length > 0 ) {
      if ( INTERSECTED != intersects[ 0 ].object ) {
        $("#infoBox").text("") // sets text to empty
        $("#infoBox").append(intersects[0].object.uuid+"<br>") // sets text to empty
        $("#infoBox").dialog("open");
          coinPreview = scene.getObjectByName("Coin");
          coinShaderPreview = scene.getObjectByName("CoinShader");
          
          camera.add(coinPreview);
          camera.add(coinShaderPreview);
          coinShaderPreview.position.set(0, 7, -30);
          coinPreview.position.set(0, 7, -30);
          previewCoinTexture1 = new THREE.TextureLoader().load(intersects[ 0 ].object.material.map.image.currentSrc);
          previewCoinTexture1.wrapS = previewCoinTexture1.wrapT = THREE.RepeatWrapping;
          previewCoinTexture1.magFilter = THREE.NearestFilter;
          previewCoinTexture1.minFilter = THREE.NearestFilter;

          coinPreview.material =   new THREE.MeshBasicMaterial({color: 0xffccaa, map:previewCoinTexture1});
          // //coinPreview.position.set(controls.getObject().position.x, 15, (controls.getObject().position.z )- 30);

      }else{
        console.log("found");
      }
    } else {
      console.log("Paila");
    }
  }
}


function animate() {

  requestAnimationFrame(animate);

  if (controlsEnabled === true) {

    if ( bloomPass ) {
			bloomPass.copyUniforms[ "opacity" ].value = params.bloomAmount;
		}
    var time = performance.now();
    var delta = (time - prevTime) / 1000;

    velocity.x -= velocity.x * 10.0 * delta;
    velocity.z -= velocity.z * 10.0 * delta;

    velocity.y -= 9.8 * 100.0 * delta; // 100.0 = mass

    direction.z = Number(moveForward) - Number(moveBackward);
    direction.x = Number(moveLeft) - Number(moveRight);
    direction.normalize(); // this ensures consistent movements in all directions

    if (moveForward || moveBackward) velocity.z -= direction.z * 400.0 * delta;
    if (moveLeft || moveRight) velocity.x -= direction.x * 400.0 * delta;


    controls.getObject().translateX(velocity.x * delta);
    controls.getObject().translateY(velocity.y * delta);
    controls.getObject().translateZ(velocity.z * delta);

    if (controls.getObject().position.y < 10) {

      velocity.y = 0;
      controls.getObject().position.y = 10;

      canJump = true;

    }
    if( controls.getObject().position.x > 210 ){
      velocity.x = 0;
      controls.getObject().position.x = 210;
    }else if( controls.getObject().position.x < -391 ){
      velocity.x = 0;
      controls.getObject().position.x = -391;
    }

    if( controls.getObject( ).position.z < -187 ){
      velocity.z = 0;
      controls.getObject( ).position.z = -187;
    }else if( controls.getObject( ).position.z > 157 ){
      velocity.z = 0;
      controls.getObject( ).position.z = 157;
    }
    prevTime = time;

  renderer.render(scene, camera);
  hdrEffectComposer.render( 0.17 );
  directionalLight.intensity = params.sunLight;

  }
}




</script>
